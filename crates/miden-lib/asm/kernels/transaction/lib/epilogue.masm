use.$kernel::account
use.$kernel::account_delta
use.$kernel::asset_vault
use.$kernel::constants
use.$kernel::memory
use.$kernel::note

use.std::word

#Â ERRORS
# =================================================================================================

const.ERR_EPILOGUE_TOTAL_NUMBER_OF_ASSETS_MUST_STAY_THE_SAME="total number of assets in the account and all involved notes must stay the same"

const.ERR_EPILOGUE_EXECUTED_TRANSACTION_IS_EMPTY="executed transaction neither changed the account state, nor consumed any notes"

const.ERR_AUTH_PROCEDURE_CALLED_FROM_WRONG_CONTEXT="auth procedure had been called from outside the epilogue"

const.ERR_EPILOGUE_NONCE_CANNOT_BE_0="nonce cannot be 0 after an account-creating transaction"

# CONSTANTS
# =================================================================================================

# Event emitted to signal that the compute_fee procedure has obtained the current number of cycles.
const.EPILOGUE_AFTER_TX_CYCLES_OBTAINED_EVENT=event("miden::epilogue::after_tx_cycles_obtained")

# Event emitted to signal that the fee was computed.
const.EPILOGUE_BEFORE_TX_FEE_REMOVED_FROM_ACCOUNT_EVENT=event("miden::epilogue::before_tx_fee_removed_from_account")

# Event emitted to signal that an execution of the authentication procedure has started.
const.EPILOGUE_AUTH_PROC_START_EVENT=event("miden::epilogue::auth_proc_start")

# Event emitted to signal that an execution of the authentication procedure has ended.
const.EPILOGUE_AUTH_PROC_END_EVENT=event("miden::epilogue::auth_proc_end")

# An additional number of cyclces to account for the number of cycles that smt::set will take when
# removing the computed fee from the asset vault.
# Theoretically, this can safely be set to worst_case_cycles - best_case_cycles of smt::set. That's
# because we can assume that the measured number of cycles already contains at least the best case
# number of cycles, and so we only need to add the difference.
const.SMT_SET_ADDITIONAL_CYCLES=250

# The number of cycles the epilogue is estimated to take after compute_fee has been executed,
# including an unknown cycle number of the above-mentioned call to smt::set. It is safe to assume
# that this includes at least smt::set's best case number of cycles.
# This can be _estimated_ using the transaction measurements on ExecutedTransaction and can be set
# to the lowest observed value.
const.NUM_POST_COMPUTE_FEE_CYCLES=500

# The number of cycles the epilogue is estimated to take after compute_fee has been executed.
const.ESTIMATED_AFTER_COMPUTE_FEE_CYCLES=NUM_POST_COMPUTE_FEE_CYCLES+SMT_SET_ADDITIONAL_CYCLES

# OUTPUT NOTES PROCEDURES
# =================================================================================================

#! Copies the entire output note data to the advice map. If no notes were created by a transaction,
#! nothing is copied to the advice map.
#!
#! The output note data includes the note id, metadata, recipient, assets commitment, number of assets and
#! a set of assets for each note.
#!
#! Inputs:
#!   Operand stack: [OUTPUT_NOTES_COMMITMENT]
#! Outputs:
#!   Operand stack: [OUTPUT_NOTES_COMMITMENT]
#!   Advice map: {
#!      OUTPUT_NOTES_COMMITMENT: [mem[output_note_ptr]...mem[output_notes_end_ptr]],
#!   }
#!
#! Where:
#! - OUTPUT_NOTES_COMMITMENT is the note commitment computed from note's id and metadata.
#! - output_note_ptr is the start boundary of the output notes section.
#! - output_notes_end_ptr is the end boundary of the output notes section.
#! - mem[i] is the memory value stored at some address i.
proc.copy_output_notes_to_advice_map
    # get the number of notes created by the transaction
    exec.memory::get_num_output_notes
    # => [num_notes, OUTPUT_NOTES_COMMITMENT]

    # if there are output notes, add them to the advice map
    dup eq.0
    if.true
        # drop num_notes
        drop
    else
        # compute the end boundary of the output notes section
        exec.memory::get_output_note_ptr movdn.4
        # => [OUTPUT_NOTES_COMMITMENT, output_notes_end_ptr]

        # compute the start boundary of the output notes section
        exec.memory::get_output_note_data_offset movdn.4
        # => [OUTPUT_NOTES_COMMITMENT, output_note_ptr, output_notes_end_ptr]

        # insert created data into the advice map
        adv.insert_mem
        # => [OUTPUT_NOTES_COMMITMENT, output_note_ptr, output_notes_end_ptr]

        # drop output note pointers
        movup.4 drop movup.4 drop
    end
    # => [OUTPUT_NOTES_COMMITMENT]
end

# BUILD OUTPUT VAULT
# =================================================================================================

#! Builds the output vault which is combination of the assets in the account vault at the end of the
#! transaction and all the assets in the output notes.
#!
#! The output vault is built as follows:
#! - we first copy the account vault root to the output vault root.
#! - we then loop over the output notes and insert their assets into the output vault.
#!
#! Note that this does not handle anything related to the fee asset. The fee asset is removed from
#! the account vault after this procedure has executed and since it is not added to an output note,
#! we don't have to account for it explicitly.
#!
#! Inputs:  []
#! Outputs: []
proc.build_output_vault
    # copy final account vault root to output account vault root
    exec.memory::get_account_vault_root exec.memory::set_output_vault_root dropw
    # => []

    # get the number of output notes from memory
    exec.memory::get_num_output_notes
    # => [num_output_notes]

    # calculate the address at which we should stop looping
    exec.memory::get_output_note_ptr
    # => [output_notes_end_ptr]

    # compute pointer for the first output note
    push.0 exec.memory::get_output_note_ptr
    # => [output_note_ptr, output_notes_end_ptr]

    # check if the number of output notes is greater then 0. Conditional for the while loop.
    dup.1 dup.1 neq
    # => [should_loop, output_note_ptr, output_notes_end_ptr]

    # loop over output notes and add assets to output vault
    while.true
        # get the number of assets for the output note from memory
        dup exec.memory::get_output_note_num_assets
        # => [num_assets, note_data_ptr, output_notes_end_ptr]

        # prepare stack for reading output note assets
        exec.memory::get_output_vault_root_ptr dup.2 exec.memory::get_output_note_asset_data_ptr dup
        # => [assets_start_ptr, assets_start_ptr, output_vault_root_ptr, num_assets, note_data_ptr,
        #     output_notes_end_ptr]

        # compute the end pointer for output note asset looping
        dup.3 mul.4 add swap
        # => [assets_start_ptr, assets_end_ptr, output_vault_root_ptr, num_assets, note_data_ptr,
        #     output_notes_end_ptr]

        # assess if we should loop
        dup.1 dup.1 neq
        # => [should_loop, assets_start_ptr, assets_end_ptr, output_vault_root_ptr, num_assets,
        #     note_data_ptr, output_notes_end_ptr]

        # loop over output note assets and insert them into the output vault
        while.true
            # duplicate output_vault_root_ptr
            dup.2
            # => [output_vault_root_ptr, assets_start_ptr, assets_end_ptr, output_vault_root_ptr,
            #     num_assets, note_data_ptr, output_notes_end_ptr]

            # read the output note asset from memory
            padw dup.5 mem_loadw
            # => [ASSET, output_vault_root_ptr, assets_start_ptr, assets_end_ptr,
            #     output_vault_root_ptr, num_assets, note_data_ptr, output_notes_end_ptr]

            # insert output note asset into output vault
            exec.asset_vault::add_asset dropw
            # => [assets_start_ptr, assets_end_ptr, output_vault_root_ptr, num_assets,
            #     note_data_ptr, output_notes_end_ptr]

            # increment assets_start_ptr and asses if we should loop again
            add.4 dup.1 dup.1 neq
            # => [should_loop, assets_start_ptr, assets_end_ptr, output_vault_root_ptr, num_assets,
            #     note_data_ptr, output_notes_end_ptr]
        end

        # clean stack
        drop drop drop drop
        # => [note_data_ptr, output_note_end_ptr]

        # increment output note pointer and check if we should loop again
        exec.constants::get_note_mem_size add dup.1 dup.1 neq
        # => [should_loop, output_note_ptr, output_notes_end_ptr]
    end

    # clean stack
    drop drop
    # => []
end

# AUTH PROCEDURE
# =================================================================================================

#! Executes the auth procedure.
#!
#! Inputs:  []
#! Outputs: []
proc.execute_auth_procedure
    emit.EPILOGUE_AUTH_PROC_START_EVENT

    padw padw padw
    # get the auth procedure arguments
    exec.memory::get_auth_args
    # => [AUTH_ARGS, pad(12)]

    # auth procedure is at index 0 within the account procedures section.
    push.0 exec.memory::get_account_procedure_ptr
    # => [auth_procedure_ptr, AUTH_ARGS, pad(12)]

    padw dup.4 mem_loadw
    # => [AUTH_PROC_ROOT, auth_procedure_ptr, AUTH_ARGS, pad(12)]

    # if auth procedure was called already, it must have been called by a user, which is disallowed
    exec.account::was_procedure_called
    # => [was_auth_called, auth_procedure_ptr, AUTH_ARGS, pad(12)]
    assertz.err=ERR_AUTH_PROCEDURE_CALLED_FROM_WRONG_CONTEXT

    # execute the auth procedure
    dyncall
    # => [OUTPUT_3, OUTPUT_2, OUTPUT_1, OUTPUT_0]

    # clean up auth procedure outputs
    dropw dropw dropw dropw

    emit.EPILOGUE_AUTH_PROC_END_EVENT
end

# FEE PROCEDURES
# =================================================================================================

#! Computes the fee required for the current transaction.
#!
#! The number of cycles a transaction will take to verify depends logarithmically on the number of
#! cycles that were proven. We estimate this by taking log2 of the estimated number of cycles the
#! transaction will take to execute, rounded up to the next power of two.
#!
#! Inputs:  []
#! Outputs: [fee_amount]
#!
#! Where:
#! - fee_amount is the computed fee amount of the transaction in the native asset.
proc.compute_fee
    # get the number of cycles the transaction has taken to execute up this point
    clk
    # => [num_current_cycles]

    emit.EPILOGUE_AFTER_TX_CYCLES_OBTAINED_EVENT

    # estimate the number of cycles the transaction will take
    add.ESTIMATED_AFTER_COMPUTE_FEE_CYCLES
    # => [num_tx_cycles]

    # ilog2 will round down, but we need to round up, so we add 1 afterwards.
    # technically we don't need to do this if num_tx_cycles is already a power of two, but
    # because we're estimating part of the cycle count anyway, this is not a correctness
    # concern currently.
    ilog2 add.1
    # => [num_estimated_verification_cycles]

    exec.memory::get_verification_base_fee
    # => [verification_base_fee, num_estimated_verification_cycles]

    mul
    # => [verification_cost]
end

#! Builds the fee asset with the provided fee amount and the native asset ID of the transaction's
#! reference block as the faucet ID.
#!
#! Inputs:  [fee_amount]
#! Outputs: [FEE_ASSET]
#!
#! Where:
#! - fee_amount is the computed fee amount of the transaction in the native asset.
#! - FEE_ASSET is the fungible asset with amount set to fee_amount and the faucet ID set to the
#!   native asset.
proc.build_native_fee_asset
    exec.memory::get_native_asset_id
    # => [native_asset_id_prefix, native_asset_id_suffix, fee_amount]

    push.0 movdn.2
    # => [native_asset_id_prefix, native_asset_id_suffix, 0, fee_amount]
    # => [FEE_ASSET]
end

#! Computes the fee of this transaction and removes the asset from the native account's vault.
#!
#! Note that this does not have to account for the fee asset in the output vault explicitly,
#! because the fee asset is removed from the account vault after build_output_vault and because
#! it is not added to an output note. Effectively, the fee asset bypasses the asset preservation
#! check. That's okay, because the logic is entirely determined by the transaction kernel.
#!
#! Inputs:  []
#! Outputs: [FEE_ASSET]
#!
#! Where:
#! - fee_amount is the computed fee amount of the transaction in the native asset.
#! - FEE_ASSET is the fungible asset with amount set to fee_amount and the faucet ID set to the
#!   native asset.
#!
#! Panics if:
#! - the account vault does not contain the computed fee.
proc.compute_and_remove_fee
    # compute the fee the tx needs to pay
    exec.compute_fee
    # => [fee_amount]

    # build the native asset from the fee amount
    exec.build_native_fee_asset
    # => [FEE_ASSET]

    emit.EPILOGUE_BEFORE_TX_FEE_REMOVED_FROM_ACCOUNT_EVENT
    # => [FEE_ASSET]

    # remove the fee from the native account's vault
    # note that this deliberately does not use account::remove_asset_from_vault, because that
    # procedure modifies the vault delta of the account. That is undesirable because it does not
    # take a constant number of cycles, which makes it much harder to calculate the number of
    # cycles the kernel takes after computing the fee. It is also unnecessary, because the delta
    # commitment has already been computed and so any modifications done to the delta at this point
    # are essentially ignored.

    # fetch the vault root
    exec.memory::get_account_vault_root_ptr movdn.4
    # => [FEE_ASSET, acct_vault_root_ptr]

    # remove the asset from the account vault
    exec.asset_vault::remove_fungible_asset
    # => [FEE_ASSET]
end

# TRANSACTION EPILOGUE PROCEDURE
# =================================================================================================

#! Finalizes the transaction by performing the following steps:
#! - invokes the native account's authentication procedure.
#! - computes the output notes commitment.
#! - computes the transaction's fees and takes them out of the account vault.
#! - computes the account delta commitment and the final account commitment, and the merged
#!   hash of both.
#!
#! Note that the order of operations in this procedure is important. We want to run as many
#! operations as possible before computing the fee, since the fee depends on the transaction's
#! number of cycles. All operations that run before fee computation are included when invoking
#! `clk`. The cycles of operations that run after fee computation must be calculated to include
#! them in the fee and calculating is easiest when the operations are simple.
#!
#! Inputs:  []
#! Outputs: [OUTPUT_NOTES_COMMITMENT, ACCOUNT_UPDATE_COMMITMENT, FEE_ASSET, tx_expiration_block_num]
#!
#! Where:
#! - OUTPUT_NOTES_COMMITMENT is the commitment of the output notes.
#! - ACCOUNT_UPDATE_COMMITMENT is the hash of the the final account commitment and account
#!   delta commitment.
#! - FEE_ASSET is the fungible asset used as the transaction fee.
#! - tx_expiration_block_num is the transaction expiration block number.
#!
#! Locals:
#! - 0..4: OUTPUT_NOTES_COMMITMENT
#! - 4..8: FEE_ASSET
#! - 8..12: ACCOUNT_DELTA_COMMITMENT
#!
#! Panics if:
#! - the assets that were in input notes or in the account vault at the beginning of
#!   transaction execution are not in output notes or in the account vault at the end of the
#!   transaction. The exception to this is the automatically computed and removed fee asset.
#! - the transaction does not change the chain state. This must be the case to avoid tx
#!   replayability. A tx changes the chain state if it either consumes 1 or more input notes or by
#!   changing the account's state. The latter is validated as part of computing the account delta
#!   commitment.
#! - the account vault does not contain the computed fee.
export.finalize_transaction.12
    # make sure that the context was switched back to the native account
    exec.memory::assert_native_account

    # ------ Execute the account's authentication procedure ------

    exec.execute_auth_procedure
    # => []

    # nonce cannot be 0 after the first transaction
    exec.memory::get_native_account_nonce
    # => [nonce]
    eq.0 assertz.err=ERR_EPILOGUE_NONCE_CANNOT_BE_0

    # ------ Assert assets are preserved ------

    # build the output vault representing the assets that were in the account at the end of the
    # transaction and all assets from all output notes
    exec.build_output_vault
    # => []

    # assert no net creation or destruction of assets over the transaction
    exec.memory::get_input_vault_root exec.memory::get_output_vault_root
    assert_eqw.err=ERR_EPILOGUE_TOTAL_NUMBER_OF_ASSETS_MUST_STAY_THE_SAME
    # => [ACCOUNT_UPDATE_COMMITMENT]

    # ------ Compute output notes commitment ------

    exec.note::compute_output_notes_commitment
    # => [OUTPUT_NOTES_COMMITMENT]

    # copy output note data to the advice map
    exec.copy_output_notes_to_advice_map
    # => [OUTPUT_NOTES_COMMITMENT]

    # store commitment in local
    loc_storew.0 dropw
    # => []

    # ------ Compute account delta commitment ------

    exec.account_delta::compute_commitment
    # => [ACCOUNT_DELTA_COMMITMENT]

    # store commitment in local
    loc_storew.8
    # => [ACCOUNT_DELTA_COMMITMENT]

    # ------ Assert that account was changed or notes were consumed ------

    # check if the account delta commitment is the EMPTY_WORD, which is the case when the delta
    # is empty, i.e. the account did not change in this transaction
    exec.word::eqz
    # => [is_delta_commitment_empty]

    # assert that if the delta commitment is empty, the transaction had input notes,
    # otherwise this transaction is considered empty, which is not allowed
    exec.memory::get_input_notes_commitment
    # => [INPUT_NOTES_COMMITMENT, is_delta_commitment_empty]

    # if the input notes commitment is an empty word there were no input notes in this transaction
    exec.word::eqz and
    # => [is_delta_commitment_and_input_notes_commitment_empty]

    # assert that either the account was changed or notes were consumed
    assertz.err=ERR_EPILOGUE_EXECUTED_TRANSACTION_IS_EMPTY
    # => []

    # ------ Compute fees ------

    exec.compute_and_remove_fee
    # => [FEE_ASSET]

    # store fee asset in local
    loc_storew.4 dropw
    # => []

    # ------ Insert final account data into advice provider ------

    # get the offset for the end of the account data section
    exec.memory::get_core_account_data_end_ptr
    # => [acct_data_end_ptr]

    # get the offset for the start of the account data section
    exec.memory::get_current_account_data_ptr
    # => [acct_data_ptr, acct_data_end_ptr]

    # compute the final account commitment
    exec.account::compute_current_commitment
    # => [FINAL_ACCOUNT_COMMITMENT, acct_data_ptr, acct_data_end_ptr]

    # insert final account data into the advice map
    adv.insert_mem
    # => [FINAL_ACCOUNT_COMMITMENT, acct_data_ptr, acct_data_end_ptr]

    # drop account data section pointers
    movup.4 drop movup.4 drop
    # => [FINAL_ACCOUNT_COMMITMENT]

    # ------ Compute and insert account update commitment ------

    # load account delta commitment from local
    padw loc_loadw.8
    # => [ACCOUNT_DELTA_COMMITMENT, FINAL_ACCOUNT_COMMITMENT]

    # insert into advice map ACCOUNT_UPDATE_COMMITMENT: (FINAL_ACCOUNT_COMMITMENT, ACCOUNT_DELTA_COMMITMENT),
    # where ACCOUNT_UPDATE_COMMITMENT = hash(FINAL_ACCOUNT_COMMITMENT || ACCOUNT_DELTA_COMMITMENT)
    adv.insert_hdword
    # => [ACCOUNT_DELTA_COMMITMENT, FINAL_ACCOUNT_COMMITMENT]

    hmerge
    # => [ACCOUNT_UPDATE_COMMITMENT]

    # ------ Build output stack ------

    exec.memory::get_expiration_block_num movdn.4
    # => [ACCOUNT_UPDATE_COMMITMENT, tx_expiration_block_num]

    # load fee asset from local
    padw loc_loadw.4 swapw
    # => [ACCOUNT_UPDATE_COMMITMENT, FEE_ASSET, tx_expiration_block_num]

    # load output notes commitment from local
    padw loc_loadw.0
    # => [OUTPUT_NOTES_COMMITMENT, ACCOUNT_UPDATE_COMMITMENT, FEE_ASSET, tx_expiration_block_num]
end
