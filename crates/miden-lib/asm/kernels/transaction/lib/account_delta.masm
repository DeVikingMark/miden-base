use.$kernel::account
use.$kernel::asset
use.$kernel::asset_vault
use.$kernel::constants
use.$kernel::link_map
use.$kernel::memory
use.std::crypto::hashes::rpo
use.std::word

# ERRORS
# =================================================================================================

const.ERR_ACCOUNT_DELTA_NONCE_MUST_BE_INCREMENTED_IF_VAULT_OR_STORAGE_CHANGED="nonce must be incremented if account vault or account storage changed"

# CONSTANTS
# =================================================================================================

# The domain of an asset in the delta commitment.
const.DOMAIN_ASSET=1
# The domain of a value storage slot in the delta commitment.
const.DOMAIN_VALUE=2
# The domain of a map storage slot in the delta commitment.
const.DOMAIN_MAP=3

# The maximum value a felt can represent.
const.FELT_MAX=0xffffffff00000000

# PROCEDURES
# =================================================================================================

# DELTA COMPUTATION
# -------------------------------------------------------------------------------------------------

#! Computes the commitment to the native account's delta.
#!
#! See the Rust function `AccountDelta::to_commitment` for a detailed description of how it is computed.
#!
#! Inputs:  []
#! Outputs: [DELTA_COMMITMENT]
#!
#! Where:
#! - DELTA_COMMITMENT is the commitment to the account delta.
#!
#! Panics if:
#! - the vault or storage delta is not empty but the nonce increment is zero.
export.compute_commitment
    # pad capacity element of the hasher
    padw
    # => [CAPACITY]

    exec.was_nonce_incremented push.0
    # => [0, was_nonce_incremented, CAPACITY]
    # note that the delta of the nonce is equal to was_nonce_incremented
    # => [0, nonce_delta, CAPACITY]

    exec.memory::get_native_account_id
    # => [native_acct_id_prefix, native_acct_id_suffix, 0, nonce_delta, CAPACITY]
    # => [ID_AND_NONCE, CAPACITY]

    padw
    # => [EMPTY_WORD, ID_AND_NONCE, CAPACITY]

    hperm
    # => [RATE, RATE, PERM]

    # save the ID and nonce digest (the 2nd rate word) for a later check
    dupw.1 movdnw.3
    # => [RATE, RATE, PERM, ID_AND_NONCE_DIGEST]

    exec.update_fungible_asset_delta
    # => [RATE, RATE, PERM, ID_AND_NONCE_DIGEST]

    exec.update_non_fungible_asset_delta
    # => [RATE, RATE, PERM, ID_AND_NONCE_DIGEST]

    exec.update_storage_delta
    # => [RATE, RATE, PERM, ID_AND_NONCE_DIGEST]

    exec.rpo::squeeze_digest
    # => [DELTA_COMMITMENT, ID_AND_NONCE_DIGEST]

    exec.was_nonce_incremented not
    # => [!was_nonce_incremented, DELTA_COMMITMENT, ID_AND_NONCE_DIGEST]

    if.true
        # if the nonce wasn't incremented, then the vault and storage changes must be empty
        # if the delta commitment is equivalent to the ID_AND_NONCE_DIGEST, then storage
        # and vault delta were empty
        assert_eqw.err=ERR_ACCOUNT_DELTA_NONCE_MUST_BE_INCREMENTED_IF_VAULT_OR_STORAGE_CHANGED
        # => []

        # if the delta is empty, its commitment is defined as the empty word
        padw
        # => [EMPTY_WORD]
    else
        # drop the ID and nonce digest
        swapw dropw
        # => [DELTA_COMMITMENT]
    end
end

#! Updates the given delta hasher with the storage slots.
#!
#! Inputs:  [RATE, RATE, PERM]
#! Outputs: [RATE, RATE, PERM]
proc.update_storage_delta
    exec.memory::get_num_storage_slots movdn.12
    # => [RATE, RATE, PERM, num_storage_slots]

    push.0 movdn.12
    # => [RATE, RATE, PERM, slot_idx = 0, num_storage_slots]

    # loop if num_storage_slots != 0
    dup.13 neq.0
    # => [should_loop, RATE, RATE, PERM, slot_idx, num_storage_slots]

    while.true
        dup.12
        # => [slot_idx, RATE, RATE, PERM, slot_idx, num_storage_slots]

        exec.update_slot_delta
        # => [RATE, RATE, PERM, slot_idx, num_storage_slots]

        # increment slot index
        movup.12 add.1
        # => [next_slot_idx, RATE, RATE, PERM, num_storage_slots]

        dup movdn.13
        # => [next_slot_idx, RATE, RATE, PERM, next_slot_idx, num_storage_slots]

        # continue if next_slot_idx != num_storage_slots
        # we use neq instead of lt for efficiency
        dup.14 neq
        # => [should_loop, RATE, RATE, PERM, next_slot_idx, num_storage_slots]
    end
    # => [RATE, RATE, PERM, next_slot_idx, num_storage_slots]

    # clean the stack
    movup.12 drop movup.12 drop
    # => [RATE, RATE, PERM]
end

#! Updates the given delta hasher with the storage slot at the provided index.
#!
#! Inputs:  [slot_idx, RATE, RATE, PERM]
#! Outputs: [RATE, RATE, PERM]
proc.update_slot_delta
    # we use memory::get_storage_slot_type instead of the procedure in account to
    # avoid the assertion overhead
    dup exec.memory::get_native_account_storage_slots_ptr
    # => [native_account_storage_slots_section_ptr, slot_idx, slot_idx, RATE, RATE, PERM]

    exec.memory::get_storage_slot_type
    # => [storage_slot_type, slot_idx, RATE, RATE, PERM]

    # check if type == slot
    exec.constants::get_storage_slot_type_value eq
    # => [is_value_slot_type, slot_idx, RATE, RATE, PERM]

    if.true
        exec.update_value_slot_delta
    else
        exec.update_map_slot_delta
    end
    # => [RATE, RATE, PERM]
end

#! Updates the given delta hasher with the value storage slot at the provided index.
#!
#! Inputs:  [slot_idx, RATE, RATE, PERM]
#! Outputs: [RATE, RATE, PERM]
proc.update_value_slot_delta
    dup exec.account::get_item
    # => [CURRENT_VALUE, slot_idx, RATE, RATE, PERM]

    dup.4 exec.account::get_initial_item
    # => [INIT_VALUE, CURRENT_VALUE, slot_idx, RATE, RATE, PERM]

    exec.word::test_eq not
    # => [was_changed, INIT_VALUE, CURRENT_VALUE, slot_idx, RATE, RATE, PERM]

    # only include in delta if the slot's value has changed
    if.true
        # drop init value
        dropw
        # => [CURRENT_VALUE, slot_idx, RATE, RATE, PERM]

        # build value slot metadata
        push.DOMAIN_VALUE
        # => [domain, CURRENT_VALUE, slot_idx, RATE, RATE, PERM]

        movup.5 push.0.0
        # => [0, 0, slot_idx, domain, CURRENT_VALUE, RATE, RATE, PERM]

        # clear rate elements
        swapdw dropw dropw
        # => [0, 0, slot_idx, domain, CURRENT_VALUE, PERM]

        # arrange rate words in correct order
        swapw
        # => [CURRENT_VALUE, 0, 0, slot_idx, domain, PERM]

        hperm
        # => [RATE, RATE, PERM]
    else
        # drop init value, current value and slot idx
        dropw dropw drop
        # => [RATE, RATE, PERM]
    end
    # => [RATE, RATE, PERM]
end

#! Updates the given delta hasher with the map storage slot at the provided index.
#!
#! Inputs:  [slot_idx, RATE, RATE, PERM]
#! Outputs: [RATE, RATE, PERM]
#!
#! Locals:
#!   0: slot_idx
#!   1: has_next
#!   2: iter
#!   3: num_changed_entries
proc.update_map_slot_delta.4
    # initialize num_changed_entries = 0
    # this is necessary because this procedure can be called multiple times and the second
    # invocation shouldn't reuse the first invocation's value
    push.0 loc_store.3
    # => [slot_idx, RATE, RATE, PERM]

    dup loc_store.0
    # => [slot_idx, RATE, RATE, PERM]

    exec.memory::get_account_delta_storage_map_ptr
    # => [account_delta_storage_map_ptr, RATE, RATE, PERM]

    exec.link_map::iter
    # => [has_next, iter, RATE, RATE, PERM]

    # enter loop if the link map is not empty
    while.true
        exec.link_map::next_key_double_value
        # => [KEY, INIT_VALUE, NEW_VALUE, has_next, iter, ...]

        # store has_next
        movup.12 loc_store.1
        # => [KEY, INIT_VALUE, NEW_VALUE, iter, ...]

        # store iter
        movup.12 loc_store.2
        # => [KEY, INIT_VALUE, NEW_VALUE, ...]

        swapw.2
        # => [NEW_VALUE, INIT_VALUE, KEY, ...]

        exec.word::test_eq not
        # => [was_changed, NEW_VALUE, INIT_VALUE, KEY, ...]

        # if the key-value pair has actually changed, update the hasher
        if.true
            # drop the initial value
            swapw dropw
            # => [NEW_VALUE, KEY, RATE, RATE, PERM]

            # increment number of changed entries in local 3
            loc_load.3 add.1 loc_store.3
            # => [NEW_VALUE, KEY, RATE, RATE, PERM]

            # drop previous RATE elements
            swapdw dropw dropw
            # => [NEW_VALUE, KEY, PERM]

            hperm
            # => [RATE, RATE, PERM]
        else
            # discard the key and init and new value words loaded from the map
            dropw dropw dropw
            # => [RATE, RATE, PERM]
        end
        # => [RATE, RATE, PERM]

        # load iter and has_next
        loc_load.2
        # => [iter, RATE, RATE, PERM]

        loc_load.1
        # => [has_next, iter, RATE, RATE, PERM]
    end

    # drop iter
    drop
    # => [RATE, RATE, PERM]

    # only include the map slot metadata if there were entries in the map that resulted in an
    # update to the hasher state
    loc_load.3 neq.0
    # => [is_num_changed_entries_non_zero, RATE, RATE, PERM]

    if.true
        # drop the previous RATE elements
        dropw dropw
        # => [PERM]

        push.DOMAIN_MAP loc_load.0 loc_load.3 push.0 padw
        # => [EMPTY_WORD, [0, num_changed_entries, slot_idx, domain], PERM]

        hperm
        # => [RATE, RATE, PERM]
    end
    # => [RATE, RATE, PERM]
end

#! Updates the given delta hasher with the fungible asset vault delta.
#!
#! Inputs:  [RATE, RATE, PERM]
#! Outputs: [RATE, RATE, PERM]
proc.update_fungible_asset_delta.2
    exec.memory::get_account_delta_fungible_asset_ptr
    # => [account_delta_fungible_asset_ptr, RATE, RATE, PERM]

    exec.link_map::iter
    # => [has_next, iter, RATE, RATE, PERM]

    # enter loop if the link map is not empty
    while.true
        exec.link_map::next_key_value
        # => [KEY, VALUE0, has_next, iter, ...]

        # store has_next
        movup.8 loc_store.0
        # => [KEY, VALUE0, iter, ...]

        # store iter
        movup.8 loc_store.1
        # => [KEY, VALUE0, ...]
        # this stack state is equivalent to:
        # => [[faucet_id_prefix, faucet_id_suffix, 0, 0], [delta_amount, 0, 0, 0], ...]

        swapw
        # => [[delta_amount, 0, 0, 0], [faucet_id_prefix, faucet_id_suffix, 0, 0], ...]

        # compute the absolute value of delta amount with a flag indicating whether it's positive
        exec.delta_amount_absolute
        # => [[is_delta_amount_positive, delta_amount_abs, 0, 0, 0], ...]

        # rename is_delta_amount_positive to was_added
        swap.3 drop
        # => [[delta_amount_abs, 0, was_added, 0], ...]

        dup neq.0
        # => [is_delta_amount_non_zero, [delta_amount_abs, 0, was_added, 0], [faucet_id_prefix, faucet_id_suffix, 0, 0], ...]

        # if delta amount is non-zero, update the hasher
        if.true
            swap.7
            # => [[0, 0, was_added, 0], [faucet_id_prefix, faucet_id_suffix, 0, delta_amount_abs], ...]

            drop push.DOMAIN_ASSET
            # => [[domain, 0, was_added, 0], [faucet_id_prefix, faucet_id_suffix, 0, delta_amount_abs], ...]

            swap.3
            # => [[0, 0, was_added, domain], [faucet_id_prefix, faucet_id_suffix, 0, delta_amount_abs], ...]

            swapw
            # => [[faucet_id_prefix, faucet_id_suffix, 0, delta_amount_abs], [0, 0, was_added, domain], RATE, RATE, PERM]

            # drop previous RATE elements
            swapdw dropw dropw
            # => [[faucet_id_prefix, faucet_id_suffix, 0, delta_amount_abs], [0, 0, was_added, domain], PERM]

            hperm
            # => [RATE, RATE, PERM]
        else
            # discard values loaded from map: KEY, VALUE0
            dropw dropw
            # => [RATE, RATE, PERM]
        end
        # => [RATE, RATE, PERM]

        # load iter and has_next
        loc_load.1
        # => [iter, RATE, RATE, PERM]

        loc_load.0
        # => [has_next, iter, RATE, RATE, PERM]
    end

    # drop iter
    drop
    # => [RATE, RATE, PERM]
end

#! Updates the given delta hasher with the non-fungible asset vault delta.
#!
#! Inputs:  [RATE, RATE, PERM]
#! Outputs: [RATE, RATE, PERM]
proc.update_non_fungible_asset_delta.2
    exec.memory::get_account_delta_non_fungible_asset_ptr
    # => [account_delta_non_fungible_asset_ptr, RATE, RATE, PERM]

    exec.link_map::iter
    # => [has_next, iter, RATE, RATE, PERM]

    # enter loop if the link map is not empty
    while.true
        exec.link_map::next_key_value
        # => [KEY, VALUE0, has_next, iter, ...]

        # store has_next
        movup.8 loc_store.0
        # => [KEY, VALUE0, iter, ...]

        # store iter
        movup.8 loc_store.1
        # => [KEY, VALUE0, ...]
        # this stack state is equivalent to:
        # => [ASSET, [was_added, 0, 0, 0], ...]

        dup.4 neq.0
        # => [was_added_or_removed, ASSET, [was_added, 0, 0, 0], ...]

        # if the asset was added or removed (i.e. if was_added != 0), update the hasher
        if.true
            movup.4
            # => [was_added, ASSET, [0, 0, 0], ...]

            # convert was_added to a boolean
            # was_added is 1 if the asset was added and 0 - 1 if it was removed
            eq.1
            # => [was_added, ASSET, [0, 0, 0], ...]

            movdn.6
            # => [ASSET, [0, 0, was_added, 0], ...]

            push.DOMAIN_ASSET swap.8 drop
            # => [ASSET, [0, 0, was_added, domain], RATE, RATE, PERM]

            # drop previous RATE elements
            swapdw dropw dropw
            # => [ASSET, [0, 0, was_added, domain], PERM]

            hperm
            # => [RATE, RATE, PERM]
        else
            # discard the two key and value words loaded from the map
            dropw dropw
            # => [RATE, RATE, PERM]
        end
        # => [RATE, RATE, PERM]

        # load iter and has_next
        loc_load.1
        # => [iter, RATE, RATE, PERM]

        loc_load.0
        # => [has_next, iter, RATE, RATE, PERM]
    end

    # drop iter
    drop
    # => [RATE, RATE, PERM]
end

# DELTA BOOKKEEPING
# -------------------------------------------------------------------------------------------------

#! Returns a flag indicating whether the account's nonce was incremented.
#!
#! Inputs:  []
#! Outputs: [was_nonce_incremented]
#!
#! Where:
#! - was_nonce_incremented is the boolean flag indicating whether the account nonce was incremented.
export.was_nonce_incremented
    exec.memory::get_init_nonce
    # => [init_nonce]

    exec.memory::get_account_nonce
    # => [current_nonce, init_nonce]

    neq
    # => [was_nonce_incremented]
end

#! Adds the given asset to the delta.
#!
#! Assumes the asset is valid, so it should be called after asset_vault::add_asset.
#!
#! Inputs:  [ASSET]
#! Outputs: []
#!
#! Where:
#! - ASSET is the asset.
export.add_asset
    # check if the asset is a fungible asset
    exec.asset::is_fungible_asset
    # => [is_fungible_asset, ASSET]

    if.true
        exec.asset_vault::build_fungible_asset_vault_key swapw
        # => [ASSET, ASSET_KEY]

        drop drop drop movdn.4
        # => [ASSET_KEY, amount]

        exec.add_fungible_asset
        # => []
    else
        exec.add_non_fungible_asset
        # => []
    end
end

#! Removes the given asset from the delta.
#!
#! Assumes the asset is valid, so it should be called after asset_vault::remove_asset
#! (which would abort if the asset is invalid).
#!
#! Inputs:  [ASSET]
#! Outputs: []
#!
#! Where:
#! - ASSET is the asset.
export.remove_asset
    # check if the asset is a fungible asset
    exec.asset::is_fungible_asset
    # => [is_fungible_asset, ASSET, vault_root_ptr]

    if.true
        exec.asset_vault::build_fungible_asset_vault_key swapw
        # => [ASSET, ASSET_KEY]

        drop drop drop movdn.4
        # => [ASSET_KEY, amount]

        exec.remove_fungible_asset
        # => []
    else
        exec.remove_non_fungible_asset
        # => []
    end
end

#! Adds the given amount to the fungible asset delta for the asset identified by the asset key.
#!
#! Inputs:  [ASSET_KEY, amount]
#! Outputs: []
#!
#! Where:
#! - ASSET_KEY is the asset key of the fungible asset.
#! - amount is the amount by which the fungible asset's amount increases.
export.add_fungible_asset
    dupw exec.memory::get_account_delta_fungible_asset_ptr
    # => [fungible_delta_map_ptr, ASSET_KEY, ASSET_KEY, amount]

    # retrieve the current delta amount
    # contains_key can be ignored because the default value is a delta amount of 0
    # VALUE1 is unused so we drop it as well
    exec.link_map::get drop swapw dropw
    # => [delta_amount, 0, 0, 0, ASSET_KEY, amount]

    movup.8
    # => [amount, delta_amount, 0, 0, 0, ASSET_KEY]

    # compute delta + amount
    # note that this operation wraps around
    add
    # => [delta_amount, 0, 0, 0, ASSET_KEY]

    # pad VALUE1 of the link map
    swapw padw movdnw.2
    # => [ASSET_KEY, delta_amount, 0, 0, 0, EMPTY_WORD]

    exec.memory::get_account_delta_fungible_asset_ptr
    # => [fungible_delta_map_ptr, ASSET_KEY, delta_amount, 0, 0, 0, EMPTY_WORD]

    exec.link_map::set drop
    # => []
end

#! Subtracts the given amount from the fungible asset delta for the asset identified by the asset key.
#!
#! Inputs:  [ASSET_KEY, amount]
#! Outputs: []
#!
#! Where:
#! - ASSET_KEY is the asset key of the fungible asset.
#! - amount is the amount by which the fungible asset's amount decreases.
export.remove_fungible_asset
    dupw exec.memory::get_account_delta_fungible_asset_ptr
    # => [fungible_delta_map_ptr, ASSET_KEY, ASSET_KEY, amount]

    # retrieve the current delta amount
    # contains_key can be ignored because the default value is a delta amount of 0
    # VALUE1 is unused so we drop it as well
    exec.link_map::get drop swapw dropw
    # => [delta_amount, 0, 0, 0, ASSET_KEY, amount]

    movup.8
    # => [amount, delta_amount, 0, 0, 0, ASSET_KEY]

    # compute delta - amount
    # note that this operation wraps around
    sub
    # => [delta_amount, 0, 0, 0, ASSET_KEY]

    # pad VALUE1 of the link map
    swapw padw movdnw.2
    # => [ASSET_KEY, delta_amount, 0, 0, 0, EMPTY_WORD]

    exec.memory::get_account_delta_fungible_asset_ptr
    # => [fungible_delta_map_ptr, ASSET_KEY, delta_amount, 0, 0, 0, EMPTY_WORD]

    exec.link_map::set drop
    # => []
end

#! Adds the given non-fungible asset to the non-fungible asset vault delta.
#!
#! ASSET must be a valid non-fungible asset.
#!
#! If the key does not exist in the delta map, the non-fungible asset's was_added value is 0.
#! When it is added to the account vault, was_added is incremented by 1; when it is removed from
#! the account vault, was_added is decremented by 1.
#! Since an asset can only be added to or removed from a vault once, was_added will always have a
#! value of -1, 0, or 1, where -1 is represented by `0 - 1` in felt operations.
#! This means adding and removing or removing and adding the asset will correctly cancel out.
#!
#! The final was_added value after transaction execution is then interpreted as follows:
#! -1 -> asset was removed
#! 0 -> no change to the asset
#! +1 -> asset was added
#!
#! Inputs:  [ASSET]
#! Outputs: []
#!
#! Where:
#! - ASSET is the non-fungible asset to be added.
export.add_non_fungible_asset
    dupw exec.memory::get_account_delta_non_fungible_asset_ptr
    # => [non_fungible_delta_map_ptr, ASSET, ASSET]

    # retrieve the current delta
    # contains_key can be ignored because the default value is an empty word and the
    # was_added value is therefore 0
    exec.link_map::get drop
    # => [was_added, 0, 0, 0, EMPTY_WORD, ASSET]

    add.1
    # => [was_added, 0, 0, 0, EMPTY_WORD, ASSET]

    movupw.2
    # => [ASSET, was_added, 0, 0, 0, EMPTY_WORD]

    exec.memory::get_account_delta_non_fungible_asset_ptr
    # => [non_fungible_delta_map_ptr, ASSET, was_added, 0, 0, 0, EMPTY_WORD]

    exec.link_map::set drop
    # => []
end

#! Removes the given non-fungible asset from the non-fungible asset vault delta.
#!
#! ASSET must be a valid non-fungible asset.
#!
#! See add_non_fungible_asset for documentation.
#!
#! Inputs:  [ASSET]
#! Outputs: []
#!
#! Where:
#! - ASSET is the non-fungible asset to be removed.
export.remove_non_fungible_asset
    dupw exec.memory::get_account_delta_non_fungible_asset_ptr
    # => [non_fungible_delta_map_ptr, ASSET, ASSET]

    # retrieve the current delta
    # contains_key can be ignored because the default value is an empty word and the
    # was_added value is therefore 0
    exec.link_map::get drop
    # => [was_added, 0, 0, 0, EMPTY_WORD, ASSET]

    sub.1
    # => [was_added, 0, 0, 0, EMPTY_WORD, ASSET]

    movupw.2
    # => [ASSET, was_added, 0, 0, 0, EMPTY_WORD]

    exec.memory::get_account_delta_non_fungible_asset_ptr
    # => [non_fungible_delta_map_ptr, ASSET, was_added, 0, 0, 0, EMPTY_WORD]

    exec.link_map::set drop
    # => []
end

#! Updates the storage map delta of the given slot index with the given key-value pair and its
#! previous value.
#!
#! The layout of a link map entry for a given KEY is: [KEY, INIT_VALUE, NEW_VALUE] where INIT_VALUE
#! represents the initial value for the given KEY at the beginning of transaction execution and
#! NEW_VALUE is the new value. The delta entry is a NOOP if INIT_VALUE and NEW_VALUE are equal.
#!
#! Inputs:  [slot_index, KEY, PREV_VALUE, NEW_VALUE]
#! Outputs: []
#!
#! Where:
#! - slot_index is the slot index of the storage map slot.
#! - KEY is the key in the storage map that is being updated.
#! - PREV_VALUE is the previous value of the key in the storage map that is being updated.
#! - NEW_VALUE is the new value of the key in the storage map that is being updated.
export.set_map_item.8
    # retrieve the link map ptr to the storage map delta for the provided index
    exec.memory::get_account_delta_storage_map_ptr
    # => [account_delta_storage_map_ptr, KEY, PREV_VALUE, NEW_VALUE]

    # store map ptr in local
    loc_store.0
    # => [KEY, PREV_VALUE, NEW_VALUE]

    # store KEY in local
    loc_storew.4
    # => [KEY, PREV_VALUE, NEW_VALUE]

    loc_load.0
    # => [account_delta_storage_map_ptr, KEY, PREV_VALUE, NEW_VALUE]

    # retrieve the current delta
    exec.link_map::get
    # => [contains_key, VALUE0, VALUE1, PREV_VALUE, NEW_VALUE]

    movdn.12
    # => [VALUE0, VALUE1, PREV_VALUE, contains_key, NEW_VALUE]

    # VALUE1 was the previous "new value" if this key was already updated, so in any case,
    # we can drop it since this update overwrites the previous one
    swapw dropw
    # => [VALUE0, PREV_VALUE, contains_key, NEW_VALUE]

    movup.8
    # => [contains_key, VALUE0, PREV_VALUE, NEW_VALUE]

    # contains_key determines whether this is the first update to this KEY
    # if this is the first update, PREV_VALUE is the *initial* value of the key-value pair
    # if this is not the first update, VALUE0 is the initial value, so we want to store it back
    # use cdropw to selectively keep the word that represents the initial value
    # If contains_key VALUE0 remains.
    # If !contains_key PREV_VALUE remains.
    cdropw
    # => [INITIAL_VALUE, NEW_VALUE]

    # load key and index from locals
    padw loc_loadw.4 loc_load.0
    # => [account_delta_storage_map_ptr, KEY, INITIAL_VALUE, NEW_VALUE]

    exec.link_map::set drop
    # => []
end

# FUNGIBLE ASSET AMOUNT MATH
# -------------------------------------------------------------------------------------------------

# Asset Amount Deltas can be signed or unsigned and are represented as felts.
#
# Any value in range [0, 2^63 - 2^31] (inclusive) is interpreted as a positive value.
# Any value in range [2^63 - 2^31 + 1, 2^64 - 2^32] (inclusive) is interpreted as a negative value.
# 2^64 - 2^32 represents -1, 2^64 - 2^32 - 1 represents -2, and so on, up to 2^63 - 2^31 + 1 which
# represents -(2^63 - 2^31).
#
# This allows us to use the add and sub operations which wrap around. E.g. push.5 sub.6 add.1 will
# correctly result in 0.
#
# To negate a negative `value`, we can multiply the value by -1, e.g. the result of push.0 sub.1.
#
# Don't we have to check for overflows? No, because we're building on top of the guarantees of the
# asset vault. It guarantees that the max value that can be added to the vault within a transaction
# is asset::get_fungible_asset_max_amount and that the max value that can be removed is also that.
# Since the delta amount range can represent positive and negative
# asset::get_fungible_asset_max_amount, this works out.
#
# With these ranges every positive value has a negative counterpart and vice versa. This is
# **unlike** two's complements because the goldilocks modulus is odd while the "modulus" in
# binary numbers is even. For example, a signed 8-bit integer can represent 128 positive and 128
# negative values, because the total number of values is 256 divided by two. Zero is counted on the
# positive side and so i8::MAX is 127 and i8::MIN is -128 - therefore not every negative value has
# a positive counterpart. The "modulus", if you will, is 256 and even.
#
# Since the golidlocks modulus is 2^64 - 2^32 + 1 and therefore odd, we can represent
# modulus / 2 + 1 positive and modulus / 2 negative values. Again, 0 is counted on the positive
# side and so the largest representable positive value is modulus / 2 and the smallest
# representable negative value is -(modulus / 2). So, every negative value has a positive 
# counterpart (and vice versa).

#! Computes the absolute value of the given delta amount represented as a felt and returns a
#! boolean flag indicating whether the value is positive (or unsigned).
#!
#! Inputs: [delta_amount]
#! Outputs: [is_delta_amount_positive, delta_amount_abs]
#!
#! Where:
#! - delta_amount is the delta amount that can span the entire felt range.
#! - is_delta_amount_positive indicates whether the delta amount is positive.
#! - delta_amount_abs is the absolute value of the delta_amount, meaning negative values are
#!   remapped to their positive equivalent value.
proc.delta_amount_absolute
    dup exec.is_delta_amount_negative not
    # => [is_positive, delta_amount]

    # map 0 -> -1 and 1 -> 1
    dup mul.2 sub.1
    # => [multiplier, is_positive, delta_amount]

    # multiply negative values by -1 and positive values by 1 to get the absolute value
    movup.2 mul swap
    # => [is_positive, delta_amount_abs]
end

#! Returns 1 if the given delta amount is negative (or signed).
#!
#! Inputs: [delta_amount]
#! Outputs: [is_delta_amount_negative]
#!
#! Where:
#! - delta_amount is the delta amount that can span the entire felt range.
#! - is_delta_amount_negative indicates whether the delta amount represents a negative value.
proc.is_delta_amount_negative
    # delta_amount represents a negative number if it is greater than the max amount
    exec.asset::get_fungible_asset_max_amount gt
    # => [is_delta_amount_negative]
end
