# The MASM code of the Multi-Signature RPO Falcon 512 Authentication Component.

use.miden::account
use.miden::auth

# CONSTANTS
# =================================================================================================

# Auth Request Constants

# The event emitted when a signature is not found for a required signer.
const.AUTH_UNAUTHORIZED_EVENT=event("miden::auth::unauthorized")

# Storage Layout Constants
#
# ┌─────────────────────────────┬──────────┬──────────────┐
# │    THRESHOLD & APPROVERS    │ PUB KEYS │ EXECUTED TXS │
# │           (slot)            │   (map)  │    (map)     │
# ├─────────────────────────────┼──────────┼──────────────┤
# │              0              │    1     │      2       │
# └─────────────────────────────┴──────────┴──────────────┘

# The slot in this component's storage layout where both the signature threshold
# and number of approvers are stored as [threshold, num_approvers, 0, 0].
# The threshold is guaranteed to be less than or equal to num_approvers.
const.THRESHOLD_CONFIG_SLOT=0

# The slot in this component's storage layout where the public keys map is stored.
# Map entries: [key_index, 0, 0, 0] => owner_public_key
const.PUBLIC_KEYS_MAP_SLOT=1

# The slot in this component's storage layout where executed transactions are stored.
# Map entries: transaction_message => [is_executed, 0, 0, 0]
const.EXECUTED_TXS_SLOT=2

# Executed Transaction Flag Constant
const.IS_EXECUTED_FLAG=[1, 0, 0, 0]

# ERRORS
const.ERR_TX_ALREADY_EXECUTED="failed to approve multisig transaction as it was already executed"

const.ERR_MALFORMED_MULTISIG_CONFIG="number of approvers must be equal to or greater than threshold"

const.ERR_ZERO_IN_MULTISIG_CONFIG="number of approvers or threshold must not be zero"

#! Check if transaction has already been executed and add it to executed transactions for replay protection.
#!
#! Inputs:  [MSG]
#! Outputs: []
#!
#! Panics if:
#! - the same transaction has already been executed
proc.assert_new_tx
    push.IS_EXECUTED_FLAG
    # => [[0, 0, 0, is_executed], MSG]

    swapw
    # => [MSG, IS_EXECUTED_FLAG]

    push.EXECUTED_TXS_SLOT
    # => [index, MSG, IS_EXECUTED_FLAG]

    # Set the key value pair in the map to mark transaction as executed
    exec.account::set_map_item
    # => [OLD_MAP_ROOT, [0, 0, 0, is_executed]]

    dropw drop drop drop
    # => [is_executed]

    assertz.err=ERR_TX_ALREADY_EXECUTED
    # => []
end

#! Remove old owner public keys from the owner public key mapping.
#!
#! This procedure cleans up the storage by removing public keys of owners that are no longer
#! part of the multisig configuration. This procedure assumes that init_num_of_approvers and
#! new_num_of_approvers are u32 values.
#!
#! Inputs: [init_num_of_approvers, new_num_of_approvers]
#! Outputs: []
#!
#! Where:
#! - init_num_of_approvers is the original number of approvers before the update
#! - new_num_of_approvers is the new number of approvers after the update
proc.cleanup_pubkey_mapping
    dup.1 dup.1
    u32assert2 u32lt
    # => [should_loop, i = init_num_of_approvers, new_num_of_approvers]

    while.true
        # => [i, new_num_of_approvers]

        sub.1
        # => [i-1, new_num_of_approvers]

        dup
        # => [i-1, i-1, new_num_of_approvers]

        push.0.0.0
        # => [[0, 0, 0, i-1], i-1, new_num_of_approvers]

        padw swapw
        # => [[0, 0, 0, i-1], EMPTY_WORD, i-1, new_num_of_approvers]

        push.PUBLIC_KEYS_MAP_SLOT
        # => [pub_key_slot_idx, [0, 0, 0, i-1], EMPTY_WORD, i-1, new_num_of_approvers]

        exec.account::set_map_item
        # => [OLD_MAP_ROOT, OLD_MAP_VALUE, i-1, new_num_of_approvers]

        dropw dropw
        # => [i-1, new_num_of_approvers]

        dup.1 dup.1
        u32lt
        # => [should_loop, i-1, new_num_of_approvers]
    end

    drop drop
    # => []
end

#! Update threshold config and add / remove owners
#!
#! Inputs:
#!   Operand stack: [MULTISIG_CONFIG_HASH, pad(12)]
#!   Advice map: {
#!     MULTISIG_CONFIG_HASH => [CONFIG, PUB_KEY_N, PUB_KEY_N-1, ..., PUB_KEY_0]
#!   }
#! Outputs:
#!   Operand stack: []
#!
#! Where:
#! - MULTISIG_CONFIG_HASH is the hash of the threshold and new public key vector
#! - MULTISIG_CONFIG is [threshold, num_approvers, 0, 0]
#! - PUB_KEY_i is the public key of the i-th signer
#!
#! Locals:
#! 0: new_num_of_approvers
#! 1: init_num_of_approvers
export.update_signers_and_threshold.2
    adv.push_mapval
    # => [MULTISIG_CONFIG_HASH, pad(12)]

    adv_loadw
    # => [MULTISIG_CONFIG, pad(12)]

    # store new_num_of_approvers for later
    dup.2 loc_store.0
    # => [MULTISIG_CONFIG, pad(12)]

    dup.3 dup.3
    # => [num_approvers, threshold, MULTISIG_CONFIG, pad(12)]

    # make sure that the threshold is smaller than the number of approvers
    u32assert2.err=ERR_MALFORMED_MULTISIG_CONFIG
    u32gt assertz.err=ERR_MALFORMED_MULTISIG_CONFIG
    # => [MULTISIG_CONFIG, pad(12)]

    dup.3 dup.3
    # => [num_approvers, threshold, MULTISIG_CONFIG, pad(12)]

    # make sure that threshold or num_approvers are not zero
    eq.0 assertz.err=ERR_ZERO_IN_MULTISIG_CONFIG
    eq.0 assertz.err=ERR_ZERO_IN_MULTISIG_CONFIG
    # => [MULTISIG_CONFIG, pad(12)]

    push.THRESHOLD_CONFIG_SLOT
    # => [slot, MULTISIG_CONFIG, pad(12)]

    exec.account::set_item
    # => [OLD_THRESHOLD_CONFIG, pad(12)]

    # store init_num_of_approvers for later
    drop drop loc_store.1 drop
    # => [pad(12)]

    loc_load.0
    # => [num_approvers]

    dup neq.0
    while.true
        sub.1
        # => [i-1, pad(12)]

        dup push.0.0.0
        # => [[0, 0, 0, i-1], i-1, pad(12)]

        padw adv_loadw
        # => [PUB_KEY, [0, 0, 0, i-1], i-1, pad(12)]

        swapw
        # => [[0, 0, 0, i-1], PUB_KEY, i-1, pad(12)]

        push.PUBLIC_KEYS_MAP_SLOT
        # => [pub_key_slot_idx, [0, 0, 0, i-1], PUB_KEY, i-1, pad(12)]

        exec.account::set_map_item
        # => [OLD_MAP_ROOT, OLD_MAP_VALUE, i-1, pad(12)]

        dropw dropw
        # => [i-1, pad(12)]

        dup neq.0
        # => [is_non_zero, i-1, pad(12)]
    end
    # => [pad(13)]

    drop
    # => [pad(12)]

    # compare initial vs current multisig config

    # load init_num_of_approvers & new_num_of_approvers
    loc_load.0 loc_load.1
    # => [init_num_of_approvers, new_num_of_approvers, pad(12)]

    exec.cleanup_pubkey_mapping
    # => [pad(12)]
end

#! Authenticate a transaction using the Falcon signature scheme with multi-signature support.
#!
#! This procedure implements multi-signature authentication by:
#! 1. Computing the transaction summary message that needs to be signed
#! 2. Verifying signatures from multiple required signers against their public keys
#! 3. Ensuring the minimum threshold of valid signatures is met
#! 4. Implementing replay protection by tracking executed transactions
#!
#! Inputs:
#!   Operand stack: [SALT]
#!   Advice map: {
#!     h(SIG_0, MSG): SIG_0,
#!     h(SIG_1, MSG): SIG_1,
#!     h(SIG_n, MSG): SIG_n
#!   }
#! Outputs:
#!   Operand stack: []
#!
#! Where:
#! - SALT is a cryptographically random nonce that enables multiple concurrent
#!   multisig transactions while maintaining replay protection. Each transaction
#!   must use a unique SALT value to ensure transaction uniqueness.
#! - SIG_i is the signature from the i-th signer.
#! - MSG is the transaction message being signed.
#! - h(SIG_i, MSG) is the hash of the signature and message used as the advice map key.
#!
#! Panics if:
#! - insufficient number of valid signatures (below threshold).
#! - the same transaction has already been executed (replay protection).
#!
#! Invocation: call
export.auth_tx_rpo_falcon512_multisig
    exec.account::incr_nonce drop
    # => [SALT]

    # ------ Computing transaction summary ------

    exec.auth::create_tx_summary
    # => [SALT, OUTPUT_NOTES_COMMITMENT, INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT]

    # to build a tx_summary in the host, we need these four words in the advice provider
    exec.auth::adv_insert_hqword
    # => [SALT, OUTPUT_NOTES_COMMITMENT, INPUT_NOTES_COMMITMENT, ACCOUNT_DELTA_COMMITMENT]

    # the commitment to the tx summary is the message that is signed
    exec.auth::hash_tx_summary
    # => [TX_SUMMARY_COMMITMENT]

    # ------ Verifying owner signatures ------

    push.THRESHOLD_CONFIG_SLOT
    # => [index, TX_SUMMARY_COMMITMENT]

    exec.account::get_initial_item
    # => [0, 0, num_of_approvers, threshold, TX_SUMMARY_COMMITMENT]

    drop drop
    # => [num_of_approvers, threshold, TX_SUMMARY_COMMITMENT]

    swap movdn.5
    # => [num_of_approvers, TX_SUMMARY_COMMITMENT, threshold]

    push.PUBLIC_KEYS_MAP_SLOT
    # => [pub_key_slot_idx, num_of_approvers, TX_SUMMARY_COMMITMENT, threshold]

    exec.::miden::auth::rpo_falcon512::verify_signatures
    # => [num_verified_signatures, TX_SUMMARY_COMMITMENT, threshold]

    # ------ Checking threshold is >= num_verified_signatures ------

    movup.5
    # => [threshold, num_verified_signatures, TX_SUMMARY_COMMITMENT]

    u32assert2 u32lt
    # => [is_unauthorized, TX_SUMMARY_COMMITMENT]

    # If signatures are non-existent the tx will fail here.
    if.true
        emit.AUTH_UNAUTHORIZED_EVENT
        push.0 assert.err="insufficient number of signatures"
    end

    # ------ Writing executed transaction MSG to map ------

    exec.assert_new_tx
    # => [TX_SUMMARY_COMMITMENT]
end
