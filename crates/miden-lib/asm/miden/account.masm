use.miden::kernel_proc_offsets

# NATIVE ACCOUNT PROCEDURES
# =================================================================================================

#! Returns the ID of the current account.
#!
#! Inputs:  []
#! Outputs: [account_id_prefix, account_id_suffix]
#!
#! Where:
#! - account_id_{prefix,suffix} are the prefix and suffix felts of the account ID of the currently
#!   accessing account.
#!
#! Invocation: exec
export.get_id
    # start padding the stack
    push.0.0.0

    exec.kernel_proc_offsets::account_get_id_offset
    # => [offset, 0, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [account_id_prefix, account_id_suffix, pad(14)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 movdn.3 drop drop
    # => [account_id_prefix, account_id_suffix]
end

#! Returns the ID of the native account of the transaction.
#!
#! Inputs:  []
#! Outputs: [account_id_prefix, account_id_suffix]
#!
#! Where:
#! - account_id_{prefix,suffix} are the prefix and suffix felts of the native account ID of the
#!   transaction.
#!
#! Invocation: exec
export.get_native_id
    # start padding the stack
    push.0.0.0

    exec.kernel_proc_offsets::account_get_native_id_offset
    # => [offset, 0, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [account_id_prefix, account_id_suffix, pad(14)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 movdn.3 drop drop
    # => [account_id_prefix, account_id_suffix]
end

#! Returns the nonce of the current account.
#!
#! This procedure always returns the initial account nonce, as the nonce can only be incremented
#! in the authentication procedure when signing the transaction after all user code has been
#! executed.
#!
#! Inputs:  []
#! Outputs: [nonce]
#!
#! Where:
#! - nonce is the current account's nonce.
#!
#! Invocation: exec
export.get_nonce
    # start padding the stack
    push.0.0.0

    exec.kernel_proc_offsets::account_get_nonce_offset
    # => [offset, 0, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [nonce, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [nonce]
end

#! Returns the nonce of the native account of the transaction.
#!
#! Inputs:  []
#! Outputs: [nonce]
#!
#! Where:
#! - nonce is the nonce of the native account of the transaction.
#!
#! Invocation: exec
export.get_native_nonce
    # start padding the stack
    push.0.0.0

    exec.kernel_proc_offsets::account_get_native_nonce_offset
    # => [offset, 0, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [nonce, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [nonce]
end

#! Increments the account nonce by one and returns the new nonce.
#!
#! Inputs:  []
#! Outputs: [final_nonce]
#!
#! Where:
#! - final_nonce is the new nonce of the account. Since it cannot be incremented again, this will
#!   also be the final nonce of the account after transaction execution.
#!
#! Panics if:
#! - the invocation of this procedure does not originate from the native account.
#! - the invocation of this procedure does not originate from the authentication procedure
#!   of the account.
#! - the nonce has already been incremented.
#!
#! Invocation: exec
export.incr_nonce
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_incr_nonce_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [final_nonce, pad(15)]

    swap.15 dropw dropw dropw drop drop drop
    # => [final_nonce]
end

#! Returns the native account commitment at the beginning of the transaction.
#!
#! Inputs:  []
#! Outputs: [INIT_COMMITMENT]
#!
#! Where:
#! - INIT_COMMITMENT is the initial account commitment.
#!
#! Invocation: exec
export.get_initial_commitment
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_get_initial_commitment_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [INIT_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [INIT_COMMITMENT]
end

#! Computes and returns the account commitment from account data stored in memory.
#!
#! Inputs:  []
#! Outputs: [ACCOUNT_COMMITMENT]
#!
#! Where:
#! - ACCOUNT_COMMITMENT is the commitment of the account data.
#!
#! Invocation: exec
export.compute_current_commitment
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_compute_current_commitment_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [ACCOUNT_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [ACCOUNT_COMMITMENT]
end

#! Computes the commitment to the native account's delta.
#!
#! Note that if the account state has changed, the nonce must be incremented before this procedure
#! is called, otherwise it will panic. This means it can only be called from an auth procedure,
#! since only auth procedures are allowed to increment the nonce.
#!
#! Inputs:  []
#! Outputs: [DELTA_COMMITMENT]
#!
#! Where:
#! - DELTA_COMMITMENT is the commitment to the account delta.
#!
#! Panics if:
#! - the vault or storage delta is not empty but the nonce increment is zero.
export.compute_delta_commitment
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_compute_delta_commitment_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [DELTA_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [DELTA_COMMITMENT]
end

#! Gets an item from the account storage. Panics if the index is out of bounds.
#!
#! Inputs:  [index]
#! Outputs: [VALUE]
#!
#! Where:
#! - index is the index of the item to get.
#! - VALUE is the value of the item.
#!
#! Panics if:
#! - the index of the requested item is out of bounds.
#!
#! Invocation: exec
export.get_item
    push.0.0 movup.2
    # => [index, 0, 0]

    exec.kernel_proc_offsets::account_get_item_offset
    # => [offset, index, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, index, pad(14)]

    syscall.exec_kernel_proc
    # => [VALUE, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [VALUE]
end

#! Gets the initial item from the account storage slot as it was at the beginning of the
#! transaction.
#!
#! Inputs:  [index]
#! Outputs: [INIT_VALUE]
#!
#! Where:
#! - index is the index of the item to get.
#! - INIT_VALUE is the initial value of the item at the beginning of the transaction.
#!
#! Panics if:
#! - the index of the requested item is out of bounds.
#!
#! Invocation: exec
export.get_initial_item
    push.0.0 movup.2
    # => [index, 0, 0]

    exec.kernel_proc_offsets::account_get_initial_item_offset
    # => [offset, index, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, index, pad(14)]

    syscall.exec_kernel_proc
    # => [INIT_VALUE, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [INIT_VALUE]
end

#! Sets an item in the account storage. Panics if the index is out of bounds.
#!
#! Inputs:  [index, VALUE]
#! Outputs: [OLD_VALUE]
#!
#! Where:
#! - index is the index of the item to set.
#! - VALUE is the value to set.
#! - OLD_VALUE is the previous value of the item.
#!
#! Panics if:
#! - the index of the item is out of bounds.
#!
#! Invocation: exec
export.set_item
    exec.kernel_proc_offsets::account_set_item_offset
    # => [offset, index, VALUE]

    # pad the stack
    push.0.0 movdn.7 movdn.7 padw padw swapdw
    # => [offset, index, VALUE, pad(10)]

    syscall.exec_kernel_proc
    # => [OLD_VALUE, pad(12)]

    # clean the stack
    swapw.3 dropw dropw dropw
    # => [OLD_VALUE]
end

#! Gets a map item from the account storage.
#!
#! Inputs:  [index, KEY]
#! Outputs: [VALUE]
#!
#! Where:
#! - index is the index of the map where the KEY VALUE should be read.
#! - KEY is the key of the item to get.
#! - VALUE is the value of the item.
#!
#! Panics if:
#! - the index for the map is out of bounds, meaning > 255.
#! - the slot item at index is not a map.
#!
#! Invocation: exec
export.get_map_item
    exec.kernel_proc_offsets::account_get_map_item_offset
    # => [offset, index, KEY]

    # pad the stack
    push.0.0 movdn.7 movdn.7 padw padw swapdw
    # => [offset, index, KEY, pad(10)]

    syscall.exec_kernel_proc
    # => [VALUE, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [VALUE]
end

#! Sets a map item in the account storage.
#!
#! Inputs:  [index, KEY, VALUE]
#! Outputs: [OLD_MAP_ROOT, OLD_MAP_VALUE]
#!
#! Where:
#! - index is the index of the map where the KEY VALUE should be set.
#! - KEY is the key to set at VALUE.
#! - VALUE is the value to set at KEY.
#! - OLD_MAP_ROOT is the old map root.
#! - OLD_MAP_VALUE is the old value at KEY.
#!
#! Panics if:
#! - the index for the map is out of bounds, meaning > 255.
#! - the slot item at index is not a map.
#!
#! Invocation: exec
export.set_map_item
    exec.kernel_proc_offsets::account_set_map_item_offset
    # => [offset, index, KEY, VALUE]

    # pad the stack
    push.0.0 movdn.11 movdn.11 padw movdnw.3
    # => [offset, index, KEY, VALUE, pad(6)]

    syscall.exec_kernel_proc
    # => [OLD_MAP_ROOT, OLD_MAP_VALUE, pad(8)]

    # clean the stack
    swapdw dropw dropw
    # => [OLD_MAP_ROOT, OLD_MAP_VALUE]
end

#! Gets the initial VALUE from the account storage map as it was at the beginning of the
#! transaction.
#!
#! Inputs:  [index, KEY]
#! Outputs: [INIT_VALUE]
#!
#! Where:
#! - index is the index of the map where the KEY VALUE should be read.
#! - KEY is the key of the item to get.
#! - INIT_VALUE is the initial value of the item at the beginning of the transaction.
#!
#! Panics if:
#! - the index for the map is out of bounds, meaning > 255.
#! - the slot item at index is not a map.
#!
#! Invocation: exec
export.get_initial_map_item
    exec.kernel_proc_offsets::account_get_initial_map_item_offset
    # => [offset, index, KEY]

    # pad the stack
    push.0.0 movdn.7 movdn.7 padw padw swapdw
    # => [offset, index, KEY, pad(10)]

    syscall.exec_kernel_proc
    # => [INIT_VALUE, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [INIT_VALUE]
end

#! Gets the account code commitment of the current account.
#!
#! Notice that the account code cannot be changed during the user code execution, so the code
#! commitment doesn't change during transaction execution: commitment returned by this procedure
#! could be used as both the initial and the current.
#!
#! Inputs:  []
#! Outputs: [CODE_COMMITMENT]
#!
#! Where:
#! - CODE_COMMITMENT is the commitment of the account code.
#!
#! Invocation: exec
export.get_code_commitment
    exec.kernel_proc_offsets::account_get_code_commitment_offset
    # => [offset]

    # pad the stack
    push.0.0.0 movup.3 padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [CODE_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [CODE_COMMITMENT]
end

#! Returns the storage commitment of the native account at the beginning of the transaction.
#!
#! Inputs:  []
#! Outputs: [INIT_STORAGE_COMMITMENT]
#!
#! Where:
#! - INIT_STORAGE_COMMITMENT is the initial account storage commitment.
#!
#! Invocation: exec
export.get_initial_storage_commitment
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_get_initial_storage_commitment_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [INIT_STORAGE_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [INIT_STORAGE_COMMITMENT]
end

#! Computes the latest account storage commitment of the current account.
#!
#! Notice that this procedure always returns the latest commitment, but it doesn't actually always
#! recompute it: recomputation is performed only if the account's storage has been changed,
#! otherwise the cached value is returned.
#!
#! Inputs:  []
#! Outputs: [STORAGE_COMMITMENT]
#!
#! Where:
#! - STORAGE_COMMITMENT is the commitment of the account storage.
#!
#! Invocation: exec
export.compute_storage_commitment
    exec.kernel_proc_offsets::account_compute_storage_commitment_offset
    # => [offset]

    # pad the stack
    push.0.0.0 movup.3 padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [STORAGE_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [STORAGE_COMMITMENT]
end

#! Returns the balance of the fungible asset associated with the provided faucet_id in the current
#! account's vault.
#!
#! Inputs:  [faucet_id_prefix, faucet_id_suffix]
#! Outputs: [balance]
#!
#! Where:
#! - faucet_id_{prefix,suffix} are the prefix and suffix felts of the faucet ID of the fungible
#!   asset of interest.
#! - balance is the vault balance of the fungible asset.
#!
#! Panics if:
#! - the provided faucet ID is not an ID of a fungible faucet.
#!
#! Invocation: exec
export.get_balance
    exec.kernel_proc_offsets::account_get_balance_offset
    # => [offset, faucet_id_prefix, faucet_id_suffix]

    # pad the stack
    push.0 movdn.3 padw swapw padw padw swapdw
    # => [offset, faucet_id_prefix, faucet_id_suffix, pad(13)]

    syscall.exec_kernel_proc
    # => [balance, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [balance]
end

#! Returns the balance of the fungible asset associated with the provided faucet_id in the current 
#! account's vault at the beginning of the transaction.
#!
#! Inputs:  [faucet_id_prefix, faucet_id_suffix]
#! Outputs: [init_balance]
#!
#! Where:
#! - faucet_id_{prefix, suffix} are the prefix and suffix felts of the faucet id of the fungible
#!   asset of interest.
#! - init_balance is the vault balance of the fungible asset at the beginning of the transaction.
#!
#! Panics if:
#! - the provided faucet ID is not an ID of a fungible faucet.
#!
#! Invocation: exec
export.get_initial_balance
    exec.kernel_proc_offsets::account_get_initial_balance_offset
    # => [offset, faucet_id_prefix, faucet_id_suffix]

    # pad the stack
    push.0 movdn.3 padw swapw padw padw swapdw
    # => [offset, faucet_id_prefix, faucet_id_suffix, pad(13)]

    syscall.exec_kernel_proc
    # => [init_balance, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [init_balance]
end

#! Returns a boolean indicating whether the non-fungible asset is present in the current account's
#! vault.
#!
#! Inputs:  [ASSET]
#! Outputs: [has_asset]
#!
#! Where:
#! - ASSET is the non-fungible asset of interest
#! - has_asset is a boolean indicating whether the account vault has the asset of interest
#!
#! Panics if:
#! - the ASSET is a fungible asset.
#!
#! Invocation: exec
export.has_non_fungible_asset
    exec.kernel_proc_offsets::account_has_non_fungible_asset_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [has_asset, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [has_asset]
end

#! Add the specified asset to the vault.
#!
#! Inputs:  [ASSET]
#! Outputs: [ASSET']
#!
#! Where:
#! - ASSET' is a final asset in the account vault defined as follows:
#!   - If ASSET is a non-fungible asset, then ASSET' is the same as ASSET.
#!   - If ASSET is a fungible asset, then ASSET' is the total fungible asset in the account vault
#!     after ASSET was added to it.
#!
#! Panics if:
#! - the asset is not valid.
#! - the total value of two fungible assets is greater than or equal to 2^63.
#! - the vault already contains the same non-fungible asset.
#!
#! Invocation: exec
export.add_asset
    exec.kernel_proc_offsets::account_add_asset_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [ASSET', pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [ASSET']
end

#! Remove the specified asset from the vault.
#!
#! Inputs:  [ASSET]
#! Outputs: [ASSET]
#!
#! Where:
#! - ASSET is the asset to remove from the vault.
#!
#! Panics if:
#! - the fungible asset is not found in the vault.
#! - the amount of the fungible asset in the vault is less than the amount to be removed.
#! - the non-fungible asset is not found in the vault.
#!
#! Invocation: exec
export.remove_asset
    exec.kernel_proc_offsets::account_remove_asset_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [ASSET, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [ASSET]
end

#! Returns the vault root of the native account at the beginning of the transaction.
#!
#! Inputs:  []
#! Outputs: [INIT_VAULT_ROOT]
#!
#! Where:
#! - INIT_VAULT_ROOT is the initial account vault root.
#!
#! Invocation: exec
export.get_initial_vault_root
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_get_initial_vault_root_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [INIT_VAULT_ROOT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [INIT_VAULT_ROOT]
end

#! Returns the vault root of the current account.
#!
#! Inputs:  []
#! Outputs: [VAULT_ROOT]
#!
#! Where:
#! - VAULT_ROOT is the root of the account vault.
#!
#! Invocation: exec
export.get_vault_root
    # pad the stack for syscall invocation
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_get_vault_root_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [VAULT_ROOT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [VAULT_ROOT]
end

#! Returns 1 if a procedure was called during transaction execution, and 0 otherwise.
#!
#! Note: This returns 1 only if the procedure invoked account-restricted kernel APIs (e.g.,
#! `exec.faucet::mint`) which trigger `authenticate_and_track_procedure`. Procedures that execute
#! only local MASM instructions will return 0 even if they were executed.
#!
#! Inputs:  [PROC_ROOT]
#! Outputs: [was_called]
#!
#! Where:
#! - PROC_ROOT is the hash of the procedure to check.
#! - was_called is 1 if the procedure was called, 0 otherwise.
#!
#! Invocation: exec
export.was_procedure_called
    exec.kernel_proc_offsets::account_was_procedure_called_offset
    # => [offset, PROC_ROOT]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, PROC_ROOT, pad(11)]

    syscall.exec_kernel_proc
    # => [was_called, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [was_called]
end


